generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 Int  @id @default(autoincrement())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("Billy User")
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         BillPost[]
  votes         Vote[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tag {
  id Int @id @default(autoincrement())
  name String
  posts BillPost[]

  @@map("tags")
}

model BillPost {
  id Int @id @default(autoincrement())
  postDate DateTime @map("post_date") @default(now())
  title String
  summary String @db.Text
  contentUrl String @map("content_url")
  votes Vote[]

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  tagId Int @map("tag_id")
  tag Tag @relation(fields: [tagId], references: [id])

  @@map("bill_posts")
}

model Vote {
  id Int @id @default(autoincrement())
  type VoteType
  createdAt DateTime @map("created_at") @default(now())

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int @map("post_id")
  post BillPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum VoteType {
  UP
  DOWN
}
